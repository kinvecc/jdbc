package com.kinvecc.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
/**
 * 
 * @date:2017年11月6日下午2:34:55
 * @project_name:Students
 * @package_name:com.edu.tinzel.util
 * @file_name:Util.java
 * @classname:Util
 * @version 1.0
 */
public class Util {
	//定义数据库驱动信息
	private static final String DRIVER = "com.mysql.jdbc.Driver";
	//定义数据库地址
	private static final String URL = "jdbc:mysql://127.0.0.1:3306/test";
	//定义数据库访问用户名
	private static String user="sa";
	//定义数据库访问密码
	private static String pwd="1234";
	private static Connection con = null;
	private static PreparedStatement pst = null;
	private static ResultSet rst = null;
	/**
	 * 加载驱动，获取连接，并加载sql语句
	 * @param sql
	 * @param objects
	 * @return
	 */
	private static PreparedStatement createPreparedStatament(String sql,Object... objects) {
		try {
			Class.forName(DRIVER);
			con = DriverManager.getConnection(URL,user,pwd);
			pst = con.prepareStatement(sql);
			for (int i = 0; i < objects.length; i++) {
				pst.setObject(i+1,objects[i]);
			}
		} catch (ClassNotFoundException e1) {
			e1.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pst;
	}
	/**
	 * 执行prepareStatement对象
	 * @param sql
	 * @param objects
	 * @return
	 * @throws Exception
	 */
	public static boolean executeUpdate(String sql,Object... objects) {
		boolean bo = false;
		pst = createPreparedStatament(sql,objects);
		try {
			bo = pst.executeUpdate() != 0? true:false;
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}finally{
			try {
				closeAll(con,pst);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return bo;
	}
	/**
	 * 执行prepareStatement对象
	 * @param sql
	 * @param objects
	 * @return
	 * @throws Exception
	 */
	public static ResultSet executeQuery(String sql,Object... objects) throws Exception {
		pst = createPreparedStatament(sql,objects);
		rst = pst.executeQuery();
		return rst;
		
	}
	/**
	 * 关闭资源
	 * @param objs
	 * @throws SQLException
	 */
	public static void closeAll(Object...objs) throws SQLException{
		for (Object obj:objs) {
			if(obj instanceof Connection)
				((Connection)obj).close();
			if (obj instanceof PreparedStatement) 
				((PreparedStatement)obj).close();
			if (obj instanceof ResultSet) {
				((ResultSet)obj).close();
			}
		}
	}
	public static void closeAll() throws SQLException{
		if (!(con==null)) {
			closeAll(con);
			con=null;
		}
		if (!(pst==null)) {
			closeAll(pst);
			pst=null;
		}
		if (!(rst==null)) {
			closeAll(rst);
			rst=null;
		}
	}
}
